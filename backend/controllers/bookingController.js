const Booking = require("../models/bookingModel");
const Order = require("../models/foodModel");
const bookRoom = async (req, res) => {
  console.log("HEADERS:", req.headers);
  console.log("USER CHECK", req.auth);
  try {
    const userId = req.auth.sub;
    console.log("üì• HEADERS:", req.headers);
    console.log("üì• AUTH:", req.auth); // x√°c minh token ƒë√£ gi·∫£i m√£ ra user ch∆∞a
    console.log("USER ID:", userId);
    const { roomId, checkInDate, checkOutDate, guests } = req.body;

    if (!roomId || !checkInDate || !checkOutDate)
      return res.status(400).json({ message: "Vui l√≤ng cung c·∫•p roomId" });

    // Ki·ªÉm tra logic ng√†y
    const inDate = new Date(checkInDate);
    const outDate = new Date(checkOutDate);

    if (isNaN(inDate) || isNaN(outDate))
      return res.status(400).json({ message: "Ng√†y kh√¥ng h·ª£p l·ªá" });

    if (inDate >= outDate) {
      return res
        .status(400)
        .json({ message: "Ng√†y nh·∫≠n ph√≤ng ph·∫£i tr∆∞·ªõc ng√†y tr·∫£ ph√≤ng" });
    }
    const existingBooking = await Booking.findOne({ userId, roomId });
    if (existingBooking) {
      return res.status(400).json({ message: "B·∫°n ƒë√£ ƒë·∫∑t ph√≤ng n√†y r·ªìi!" });
    }

    const booking = new Booking({
      userId,
      roomId,
      checkInDate,
      checkOutDate,
      guests,
      // bookingDate: new Date(),
    });
    await booking.save();

    res
      .status(200)
      .json({ success: true, message: "‚úÖ ƒê·∫∑t ph√≤ng th√†nh c√¥ng!" });
  } catch (err) {
    console.error("‚ùå L·ªói khi ƒë·∫∑t ph√≤ng:", err);
    res.status(500).json({ success: false, message: "L·ªói khi ƒë·∫∑t ph√≤ng" });
  }
};

// remove room from user booking

const removeFromBookings = async (req, res) => {
  try {
    const userId = req.auth.sub;
    const { bookingId } = req.params;

    if (!bookingId) {
      return res.status(400).json({ message: "b·∫°n ch∆∞a ƒë·∫∑t ph√≤ng n√†o!" });
    }

    // ki·ªÉm tra booking c√≥ t·ªìn t·∫°i v√† thu·ªôc v·ªÅ user kh√¥ng ?
    const booking = await Booking.findById(bookingId);

    if (!booking) {
      return res.status(404).json({ message: "kh√¥ng t√¨m th·∫•y booking!" });
    }
    await Booking.findByIdAndDelete(bookingId);
    res.status(200).json({ success: true, message: "ƒê√£ h·ªßy ƒë·∫∑t ph√≤ng!" });
  } catch (error) {
    console.error("L·ªói khi h·ªßy, vui l√≤ng th·ª≠ l·∫°i sau!");
  }
};

// L·∫•y danh s√°ch ph√≤ng ƒë√£ ƒë·∫∑t c·ªßa ng∆∞·ªùi d√πng
const getMyBookings = async (req, res) => {
  console.log("üì• HEADERS:", req.headers);
  console.log("üì• AUTH:", req.auth); // x√°c minh token ƒë√£ gi·∫£i m√£ ra user ch∆∞a
  try {
    const userId = req.auth.sub;
    const bookings = await Booking.find({ userId }).populate("roomId");
    res.status(200).json({ success: true, data: bookings });
  } catch (err) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch ph√≤ng ƒë√£ ƒë·∫∑t:", err);
    res
      .status(500)
      .json({ success: false, message: "L·ªói khi l·∫•y danh s√°ch ph√≤ng ƒë√£ ƒë·∫∑t" });
  }
};
const listAllBookings = async (req, res) => {
  try {
    const bookings = await Booking.find().populate("roomId");
    res.status(200).json({ success: true, data: bookings });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch t·∫•t c·∫£ booking: ", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y danh s√°ch booking",
    });
  }
};

const ListAllOrders = async (req, res) => {
  try {
    const orders = await Order.find();
    res.status(200).json({ success: true, data: orders });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch t·∫•t c·∫£ order: ", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server khi l·∫•y danh s√°ch t·∫•t c·∫£ order",
    });
  }
};
module.exports = {
  bookRoom,
  getMyBookings,
  removeFromBookings,
  listAllBookings,
  ListAllOrders,
};
